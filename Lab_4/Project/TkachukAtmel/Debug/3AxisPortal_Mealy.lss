
3AxisPortal_Mealy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000546  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000020  00800100  00800100  000005ba  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001340  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000449  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000055f  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  00002394  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000075c  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000372  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	6d 02       	muls	r22, r29
  7e:	84 02       	muls	r24, r20
  80:	5d 01       	movw	r10, r26
  82:	b3 01       	movw	r22, r6
  84:	13 02       	muls	r17, r19
  86:	7a 01       	movw	r14, r20
  88:	87 01       	movw	r16, r14
  8a:	db 01       	movw	r26, r22
  8c:	e8 01       	movw	r28, r16
  8e:	33 02       	muls	r19, r19
  90:	40 02       	muls	r20, r16

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 32       	cpi	r26, 0x20	; 32
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 09 01 	call	0x212	; 0x212 <main>
  b2:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <GOLDiInterfaceInit>:
// ######################################################################################
// #  This function initializes the bus interface                                       #
// ######################################################################################
void GOLDiInterfaceInit(void)
{
    UART0_init();
  ba:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <UART0_init>
    
    GOLDiInterfaceOutputBuffer = (uint8_t *)&Actuators;
  be:	8b e0       	ldi	r24, 0x0B	; 11
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	90 93 0a 01 	sts	0x010A, r25
  c6:	80 93 09 01 	sts	0x0109, r24
    GOLDiInterfaceInputBuffer = (uint8_t *)&Sensors;
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 01 01 	sts	0x0101, r25
  d2:	80 93 00 01 	sts	0x0100, r24
    ReceiveIndex = 0;
  d6:	10 92 02 01 	sts	0x0102, r1
  da:	08 95       	ret

000000dc <GOLDiInterfaceSendData>:
   
// ######################################################################################
// #  This function sends data (actuators) to the GOLDi bus                             #
// ######################################################################################
void GOLDiInterfaceSendData(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
    UART0_put_char(0xFF);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	0e 94 01 01 	call	0x202	; 0x202 <UART0_put_char>
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
    
    for (uint8_t i=0; i<6;i++)
    {
        if(GOLDiInterfaceOutputBuffer[i] >= 0x80)
  ea:	e0 91 09 01 	lds	r30, 0x0109
  ee:	f0 91 0a 01 	lds	r31, 0x010A
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	74 f4       	brge	.+28     	; 0x118 <GOLDiInterfaceSendData+0x3c>
        {
            UART0_put_char(0x80);
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	0e 94 01 01 	call	0x202	; 0x202 <UART0_put_char>
            UART0_put_char(GOLDiInterfaceOutputBuffer[i]-0x80);
 102:	e0 91 09 01 	lds	r30, 0x0109
 106:	f0 91 0a 01 	lds	r31, 0x010A
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	80 81       	ld	r24, Z
 110:	80 58       	subi	r24, 0x80	; 128
 112:	0e 94 01 01 	call	0x202	; 0x202 <UART0_put_char>
 116:	0c c0       	rjmp	.+24     	; 0x130 <GOLDiInterfaceSendData+0x54>
        }
        else
        {
            UART0_put_char(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 01 01 	call	0x202	; 0x202 <UART0_put_char>
            UART0_put_char(GOLDiInterfaceOutputBuffer[i]);
 11e:	e0 91 09 01 	lds	r30, 0x0109
 122:	f0 91 0a 01 	lds	r31, 0x010A
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	80 81       	ld	r24, Z
 12c:	0e 94 01 01 	call	0x202	; 0x202 <UART0_put_char>
 130:	21 96       	adiw	r28, 0x01	; 1
// ######################################################################################
void GOLDiInterfaceSendData(void)
{
    UART0_put_char(0xFF);
    
    for (uint8_t i=0; i<6;i++)
 132:	c6 30       	cpi	r28, 0x06	; 6
 134:	d1 05       	cpc	r29, r1
 136:	c9 f6       	brne	.-78     	; 0xea <GOLDiInterfaceSendData+0xe>
            UART0_put_char(0);
            UART0_put_char(GOLDiInterfaceOutputBuffer[i]);
        }
    }
    
    UART0_put_char(0xFE);
 138:	8e ef       	ldi	r24, 0xFE	; 254
 13a:	0e 94 01 01 	call	0x202	; 0x202 <UART0_put_char>
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <GOLDiInterfaceNewData>:
// ######################################################################################
// #  This functions receives data (sensors) from the GOLDi bus                         #
// ######################################################################################
void GOLDiInterfaceNewData(uint8_t Data)
{
    switch(Data)
 144:	8e 3f       	cpi	r24, 0xFE	; 254
 146:	29 f0       	breq	.+10     	; 0x152 <GOLDiInterfaceNewData+0xe>
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	b1 f4       	brne	.+44     	; 0x178 <GOLDiInterfaceNewData+0x34>
    {
        case 0xFF:
            //start data transfer
            ReceiveIndex=0;
 14c:	10 92 02 01 	sts	0x0102, r1
            break;
 150:	08 95       	ret
 152:	e3 e0       	ldi	r30, 0x03	; 3
 154:	f1 e0       	ldi	r31, 0x01	; 1
// ######################################################################################
// #  This functions receives data (sensors) from the GOLDi bus                         #
// ######################################################################################
void GOLDiInterfaceNewData(uint8_t Data)
{
    switch(Data)
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
            ReceiveIndex=0;
            break;
        case 0xFE:
            //data transfer ended
            for (uint8_t i=0; i<6;i++)
                GOLDiInterfaceInputBuffer[i] = TmpBuffer[i];
 15a:	21 91       	ld	r18, Z+
 15c:	a0 91 00 01 	lds	r26, 0x0100
 160:	b0 91 01 01 	lds	r27, 0x0101
 164:	a8 0f       	add	r26, r24
 166:	b9 1f       	adc	r27, r25
 168:	2c 93       	st	X, r18
 16a:	01 96       	adiw	r24, 0x01	; 1
            //start data transfer
            ReceiveIndex=0;
            break;
        case 0xFE:
            //data transfer ended
            for (uint8_t i=0; i<6;i++)
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	91 05       	cpc	r25, r1
 170:	a1 f7       	brne	.-24     	; 0x15a <GOLDiInterfaceNewData+0x16>
                GOLDiInterfaceInputBuffer[i] = TmpBuffer[i];
            ReceiveIndex=0;
 172:	10 92 02 01 	sts	0x0102, r1
            break;
 176:	08 95       	ret
        default:
            if(ReceiveIndex%2 == 1)
 178:	90 91 02 01 	lds	r25, 0x0102
 17c:	90 ff       	sbrs	r25, 0
 17e:	09 c0       	rjmp	.+18     	; 0x192 <GOLDiInterfaceNewData+0x4e>
                TmpBuffer[ReceiveIndex/2]+= Data;
 180:	e9 2f       	mov	r30, r25
 182:	e6 95       	lsr	r30
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ed 5f       	subi	r30, 0xFD	; 253
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	20 81       	ld	r18, Z
 18c:	82 0f       	add	r24, r18
 18e:	80 83       	st	Z, r24
 190:	06 c0       	rjmp	.+12     	; 0x19e <GOLDiInterfaceNewData+0x5a>
            else
                TmpBuffer[ReceiveIndex/2] = Data;
 192:	e9 2f       	mov	r30, r25
 194:	e6 95       	lsr	r30
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ed 5f       	subi	r30, 0xFD	; 253
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	80 83       	st	Z, r24
            ReceiveIndex++;
 19e:	9f 5f       	subi	r25, 0xFF	; 255
 1a0:	90 93 02 01 	sts	0x0102, r25
 1a4:	08 95       	ret

000001a6 <__vector_20>:
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	80 91 c6 00 	lds	r24, 0x00C6
 1cc:	0e 94 a2 00 	call	0x144	; 0x144 <GOLDiInterfaceNewData>
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <UART0_init>:
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 c4 00 	sts	0x00C4, r24
 1f8:	88 e9       	ldi	r24, 0x98	; 152
 1fa:	80 93 c1 00 	sts	0x00C1, r24
 1fe:	78 94       	sei
 200:	08 95       	ret

00000202 <UART0_put_char>:
 202:	e0 ec       	ldi	r30, 0xC0	; 192
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	95 ff       	sbrs	r25, 5
 20a:	fd cf       	rjmp	.-6      	; 0x206 <UART0_put_char+0x4>
 20c:	80 93 c6 00 	sts	0x00C6, r24
 210:	08 95       	ret

00000212 <main>:
#include "GOLDiInterface/GOLDiInterface.h"
#include "UserDesign/UserDesign.h"

int main(void)
{
    GOLDiInterfaceInit();                                                                       // Initialize the bus interface
 212:	0e 94 5d 00 	call	0xba	; 0xba <GOLDiInterfaceInit>
    StateMachineInit();                                                                         // Initialize the finite state machine
 216:	0e 94 12 01 	call	0x224	; 0x224 <StateMachineInit>
    
    while(1)
    {
        StateMachineUpdate();                                                                   // Update the FSM
 21a:	0e 94 28 01 	call	0x250	; 0x250 <StateMachineUpdate>
        GOLDiInterfaceSendData();                                                               // Send new actuators to the GOLDi bus
 21e:	0e 94 6e 00 	call	0xdc	; 0xdc <GOLDiInterfaceSendData>
 222:	fb cf       	rjmp	.-10     	; 0x21a <main+0x8>

00000224 <StateMachineInit>:
// ######################################################################################
// #  This function initializes the finite state machine with start state               #
// ######################################################################################
void StateMachineInit(void)
{
    State = ON_1;
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	80 93 1d 01 	sts	0x011D, r24
	flag = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 18 01 	sts	0x0118, r25
 232:	80 93 17 01 	sts	0x0117, r24
	open1 = open2 = open3 = 0;
 236:	10 92 1f 01 	sts	0x011F, r1
 23a:	10 92 1e 01 	sts	0x011E, r1
 23e:	10 92 1c 01 	sts	0x011C, r1
 242:	10 92 1b 01 	sts	0x011B, r1
 246:	10 92 1a 01 	sts	0x011A, r1
 24a:	10 92 19 01 	sts	0x0119, r1
 24e:	08 95       	ret

00000250 <StateMachineUpdate>:
// ######################################################################################
// #  This function updates the current state of the finite state machine               #
// ######################################################################################
void StateMachineUpdate(void)
{
	if(Sensors.ElevatorControlFloor1) {
 250:	20 91 13 01 	lds	r18, 0x0113
 254:	24 ff       	sbrs	r18, 4
 256:	0b c0       	rjmp	.+22     	; 0x26e <StateMachineUpdate+0x1e>
		Actuators.ElevatorControlIndicatorDisplayFloor1 = 1;
 258:	ed e0       	ldi	r30, 0x0D	; 13
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	80 81       	ld	r24, Z
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	80 83       	st	Z, r24
		open1 = 1;}
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 1a 01 	sts	0x011A, r25
 26a:	80 93 19 01 	sts	0x0119, r24
	if(Sensors.ElevatorControlFloor2) {
 26e:	25 ff       	sbrs	r18, 5
 270:	0b c0       	rjmp	.+22     	; 0x288 <StateMachineUpdate+0x38>
		Actuators.ElevatorControlIndicatorDisplayFloor2 = 1;
 272:	ed e0       	ldi	r30, 0x0D	; 13
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	80 81       	ld	r24, Z
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 83       	st	Z, r24
		open2 = 1;}
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 1c 01 	sts	0x011C, r25
 284:	80 93 1b 01 	sts	0x011B, r24
	if(Sensors.ElevatorControlFloor3) {
 288:	26 ff       	sbrs	r18, 6
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <StateMachineUpdate+0x52>
		Actuators.ElevatorControlIndicatorDisplayFloor3 = 1;
 28c:	ed e0       	ldi	r30, 0x0D	; 13
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	80 81       	ld	r24, Z
 292:	80 61       	ori	r24, 0x10	; 16
 294:	80 83       	st	Z, r24
		open3 = 1;}
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 1f 01 	sts	0x011F, r25
 29e:	80 93 1e 01 	sts	0x011E, r24
    switch (State)
 2a2:	80 91 1d 01 	lds	r24, 0x011D
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	8b 30       	cpi	r24, 0x0B	; 11
 2aa:	91 05       	cpc	r25, r1
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <StateMachineUpdate+0x60>
 2ae:	42 c1       	rjmp	.+644    	; 0x534 <StateMachineUpdate+0x2e4>
 2b0:	fc 01       	movw	r30, r24
 2b2:	e2 5c       	subi	r30, 0xC2	; 194
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	0c 94 9b 02 	jmp	0x536	; 0x536 <__tablejump2__>
    {
		case ON_1:
			if(open1 == 1){
 2ba:	80 91 19 01 	lds	r24, 0x0119
 2be:	90 91 1a 01 	lds	r25, 0x011A
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	21 f4       	brne	.+8      	; 0x2ce <StateMachineUpdate+0x7e>
				State = DOOR1_OPEN;
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	80 93 1d 01 	sts	0x011D, r24
 2cc:	08 95       	ret
			} else if(Sensors.Floor1DoorClosed) {
 2ce:	80 91 12 01 	lds	r24, 0x0112
 2d2:	80 ff       	sbrs	r24, 0
 2d4:	2f c1       	rjmp	.+606    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor1Close = 0;
 2d6:	eb e0       	ldi	r30, 0x0B	; 11
 2d8:	f1 e0       	ldi	r31, 0x01	; 1
 2da:	80 81       	ld	r24, Z
				Actuators.DriveUpwards = 1;
 2dc:	8f 7e       	andi	r24, 0xEF	; 239
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	80 83       	st	Z, r24
				State = GOING_UP;
 2e2:	10 92 1d 01 	sts	0x011D, r1
				flag = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 18 01 	sts	0x0118, r25
 2ee:	80 93 17 01 	sts	0x0117, r24
 2f2:	08 95       	ret
			}
			break;
		case DOOR1_OPEN:
			if(Sensors.Floor1DoorClosed){
 2f4:	80 91 12 01 	lds	r24, 0x0112
 2f8:	80 ff       	sbrs	r24, 0
 2fa:	1c c1       	rjmp	.+568    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor1Open = 1;
 2fc:	eb e0       	ldi	r30, 0x0B	; 11
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	80 81       	ld	r24, Z
 302:	88 60       	ori	r24, 0x08	; 8
 304:	80 83       	st	Z, r24
				State = DOOR1_CLOSE;
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	80 93 1d 01 	sts	0x011D, r24
 30c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	8d e3       	ldi	r24, 0x3D	; 61
 312:	99 e4       	ldi	r25, 0x49	; 73
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <StateMachineUpdate+0xc4>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <StateMachineUpdate+0xce>
 31e:	00 00       	nop
			}
			break;
		case DOOR1_CLOSE:
			_delay_ms(2000);
			Actuators.DoorFloor1Open = 0;
 320:	eb e0       	ldi	r30, 0x0B	; 11
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	80 81       	ld	r24, Z
 326:	87 7f       	andi	r24, 0xF7	; 247
 328:	80 83       	st	Z, r24
			if(Sensors.Floor1DoorOpen){
 32a:	80 91 11 01 	lds	r24, 0x0111
 32e:	88 23       	and	r24, r24
 330:	0c f0       	brlt	.+2      	; 0x334 <StateMachineUpdate+0xe4>
 332:	00 c1       	rjmp	.+512    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor1Close = 1;
 334:	80 81       	ld	r24, Z
 336:	80 61       	ori	r24, 0x10	; 16
 338:	80 83       	st	Z, r24
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	8d e3       	ldi	r24, 0x3D	; 61
 33e:	99 e4       	ldi	r25, 0x49	; 73
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <StateMachineUpdate+0xf0>
 348:	00 c0       	rjmp	.+0      	; 0x34a <StateMachineUpdate+0xfa>
 34a:	00 00       	nop
				_delay_ms(2000);
				Actuators.ElevatorControlIndicatorDisplayFloor1 = 0;
 34c:	ed e0       	ldi	r30, 0x0D	; 13
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	80 81       	ld	r24, Z
 352:	8b 7f       	andi	r24, 0xFB	; 251
 354:	80 83       	st	Z, r24
				open1 = 0;
 356:	10 92 1a 01 	sts	0x011A, r1
 35a:	10 92 19 01 	sts	0x0119, r1
				State = ON_1;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	80 93 1d 01 	sts	0x011D, r24
 364:	08 95       	ret
			}
			break;
		case ON_2:
			if(open2 == 1){
 366:	80 91 1b 01 	lds	r24, 0x011B
 36a:	90 91 1c 01 	lds	r25, 0x011C
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	21 f4       	brne	.+8      	; 0x37a <StateMachineUpdate+0x12a>
				State = DOOR2_OPEN;
 372:	87 e0       	ldi	r24, 0x07	; 7
 374:	80 93 1d 01 	sts	0x011D, r24
 378:	08 95       	ret
			} else if(Sensors.Floor2DoorClosed){
 37a:	80 91 12 01 	lds	r24, 0x0112
 37e:	82 ff       	sbrs	r24, 2
 380:	d9 c0       	rjmp	.+434    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor2Close = 0;
 382:	eb e0       	ldi	r30, 0x0B	; 11
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	80 81       	ld	r24, Z
 388:	8f 7b       	andi	r24, 0xBF	; 191
 38a:	80 83       	st	Z, r24
				if(flag == 1) {
 38c:	80 91 17 01 	lds	r24, 0x0117
 390:	90 91 18 01 	lds	r25, 0x0118
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	31 f4       	brne	.+12     	; 0x3a4 <StateMachineUpdate+0x154>
					Actuators.DriveUpwards = 1;
 398:	80 81       	ld	r24, Z
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	80 83       	st	Z, r24
					State = GOING_UP;
 39e:	10 92 1d 01 	sts	0x011D, r1
 3a2:	08 95       	ret
				} else {
					Actuators.DriveDownwards = 1;
 3a4:	eb e0       	ldi	r30, 0x0B	; 11
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	80 81       	ld	r24, Z
 3aa:	82 60       	ori	r24, 0x02	; 2
 3ac:	80 83       	st	Z, r24
					State = GOING_DOWN;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 1d 01 	sts	0x011D, r24
 3b4:	08 95       	ret
				}
			}
			break;
		case DOOR2_OPEN:
			if(Sensors.Floor2DoorClosed){
 3b6:	80 91 12 01 	lds	r24, 0x0112
 3ba:	82 ff       	sbrs	r24, 2
 3bc:	bb c0       	rjmp	.+374    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor2Open = 1;
 3be:	eb e0       	ldi	r30, 0x0B	; 11
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	80 81       	ld	r24, Z
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	80 83       	st	Z, r24
				State = DOOR2_CLOSE;
 3c8:	88 e0       	ldi	r24, 0x08	; 8
 3ca:	80 93 1d 01 	sts	0x011D, r24
 3ce:	08 95       	ret
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	8d e3       	ldi	r24, 0x3D	; 61
 3d4:	99 e4       	ldi	r25, 0x49	; 73
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <StateMachineUpdate+0x186>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <StateMachineUpdate+0x190>
 3e0:	00 00       	nop
			}
			break;
		case DOOR2_CLOSE:
			_delay_ms(2000);
			Actuators.DoorFloor2Open = 0;
 3e2:	eb e0       	ldi	r30, 0x0B	; 11
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	80 81       	ld	r24, Z
 3e8:	8f 7d       	andi	r24, 0xDF	; 223
 3ea:	80 83       	st	Z, r24
			if(Sensors.Floor2DoorOpen){
 3ec:	80 91 12 01 	lds	r24, 0x0112
 3f0:	81 ff       	sbrs	r24, 1
 3f2:	a0 c0       	rjmp	.+320    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor2Close = 1;
 3f4:	80 81       	ld	r24, Z
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	80 83       	st	Z, r24
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	8d e3       	ldi	r24, 0x3D	; 61
 3fe:	99 e4       	ldi	r25, 0x49	; 73
 400:	21 50       	subi	r18, 0x01	; 1
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <StateMachineUpdate+0x1b0>
 408:	00 c0       	rjmp	.+0      	; 0x40a <StateMachineUpdate+0x1ba>
 40a:	00 00       	nop
				_delay_ms(2000);
				Actuators.ElevatorControlIndicatorDisplayFloor2 = 0;
 40c:	ed e0       	ldi	r30, 0x0D	; 13
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	80 81       	ld	r24, Z
 412:	87 7f       	andi	r24, 0xF7	; 247
 414:	80 83       	st	Z, r24
				open2 = 0;
 416:	10 92 1c 01 	sts	0x011C, r1
 41a:	10 92 1b 01 	sts	0x011B, r1
				State = ON_2;
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	80 93 1d 01 	sts	0x011D, r24
 424:	08 95       	ret
			}
			break;
		case ON_3:
			if(open3 == 1){
 426:	80 91 1e 01 	lds	r24, 0x011E
 42a:	90 91 1f 01 	lds	r25, 0x011F
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	21 f4       	brne	.+8      	; 0x43a <StateMachineUpdate+0x1ea>
				State = DOOR3_OPEN;
 432:	89 e0       	ldi	r24, 0x09	; 9
 434:	80 93 1d 01 	sts	0x011D, r24
 438:	08 95       	ret
			} else if(Sensors.Floor3DoorClosed) {
 43a:	80 91 12 01 	lds	r24, 0x0112
 43e:	84 ff       	sbrs	r24, 4
 440:	79 c0       	rjmp	.+242    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor3Close = 0;
 442:	ec e0       	ldi	r30, 0x0C	; 12
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	80 81       	ld	r24, Z
 448:	8e 7f       	andi	r24, 0xFE	; 254
 44a:	80 83       	st	Z, r24
				Actuators.DriveDownwards = 1;
 44c:	eb e0       	ldi	r30, 0x0B	; 11
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	80 81       	ld	r24, Z
 452:	82 60       	ori	r24, 0x02	; 2
 454:	80 83       	st	Z, r24
				State = GOING_DOWN;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 1d 01 	sts	0x011D, r24
				flag = 0;
 45c:	10 92 18 01 	sts	0x0118, r1
 460:	10 92 17 01 	sts	0x0117, r1
 464:	08 95       	ret
			}
			break;
		case DOOR3_OPEN:
			if(Sensors.Floor3DoorClosed){
 466:	80 91 12 01 	lds	r24, 0x0112
 46a:	84 ff       	sbrs	r24, 4
 46c:	63 c0       	rjmp	.+198    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor3Open = 1;
 46e:	eb e0       	ldi	r30, 0x0B	; 11
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	80 81       	ld	r24, Z
 474:	80 68       	ori	r24, 0x80	; 128
 476:	80 83       	st	Z, r24
				State = DOOR3_CLOSE;
 478:	8a e0       	ldi	r24, 0x0A	; 10
 47a:	80 93 1d 01 	sts	0x011D, r24
 47e:	08 95       	ret
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	8d e3       	ldi	r24, 0x3D	; 61
 484:	99 e4       	ldi	r25, 0x49	; 73
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <StateMachineUpdate+0x236>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <StateMachineUpdate+0x240>
 490:	00 00       	nop
			}
			break;
		case DOOR3_CLOSE:
			_delay_ms(2000);
			Actuators.DoorFloor3Open = 0;
 492:	eb e0       	ldi	r30, 0x0B	; 11
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	80 81       	ld	r24, Z
 498:	8f 77       	andi	r24, 0x7F	; 127
 49a:	80 83       	st	Z, r24
			if(Sensors.Floor3DoorOpen){
 49c:	80 91 12 01 	lds	r24, 0x0112
 4a0:	83 ff       	sbrs	r24, 3
 4a2:	48 c0       	rjmp	.+144    	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DoorFloor3Close = 1;
 4a4:	ec e0       	ldi	r30, 0x0C	; 12
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	80 81       	ld	r24, Z
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	80 83       	st	Z, r24
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	8d e3       	ldi	r24, 0x3D	; 61
 4b2:	99 e4       	ldi	r25, 0x49	; 73
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <StateMachineUpdate+0x264>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <StateMachineUpdate+0x26e>
 4be:	00 00       	nop
				_delay_ms(2000);
				Actuators.ElevatorControlIndicatorDisplayFloor3 = 0;
 4c0:	ed e0       	ldi	r30, 0x0D	; 13
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	80 81       	ld	r24, Z
 4c6:	8f 7e       	andi	r24, 0xEF	; 239
 4c8:	80 83       	st	Z, r24
				open3 = 0;
 4ca:	10 92 1f 01 	sts	0x011F, r1
 4ce:	10 92 1e 01 	sts	0x011E, r1
				State = ON_3;
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	80 93 1d 01 	sts	0x011D, r24
 4d8:	08 95       	ret
			}
			break;
		case GOING_UP:
			if(Sensors.ElevatorOnFloor3){
 4da:	80 91 11 01 	lds	r24, 0x0111
 4de:	82 ff       	sbrs	r24, 2
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <StateMachineUpdate+0x2a2>
				Actuators.DriveUpwards = 0;
 4e2:	eb e0       	ldi	r30, 0x0B	; 11
 4e4:	f1 e0       	ldi	r31, 0x01	; 1
 4e6:	90 81       	ld	r25, Z
 4e8:	9e 7f       	andi	r25, 0xFE	; 254
 4ea:	90 83       	st	Z, r25
				State = ON_3;
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	90 93 1d 01 	sts	0x011D, r25
			}
			if(Sensors.ElevatorOnFloor2) {
 4f2:	81 ff       	sbrs	r24, 1
 4f4:	1f c0       	rjmp	.+62     	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DriveUpwards = 0;
 4f6:	eb e0       	ldi	r30, 0x0B	; 11
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	80 81       	ld	r24, Z
 4fc:	8e 7f       	andi	r24, 0xFE	; 254
 4fe:	80 83       	st	Z, r24
				State = ON_2;
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	80 93 1d 01 	sts	0x011D, r24
 506:	08 95       	ret
			}
			break;
		case GOING_DOWN:
			if(Sensors.ElevatorOnFloor1){
 508:	80 91 11 01 	lds	r24, 0x0111
 50c:	80 ff       	sbrs	r24, 0
 50e:	08 c0       	rjmp	.+16     	; 0x520 <StateMachineUpdate+0x2d0>
				Actuators.DriveDownwards = 0;
 510:	eb e0       	ldi	r30, 0x0B	; 11
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	90 81       	ld	r25, Z
 516:	9d 7f       	andi	r25, 0xFD	; 253
 518:	90 83       	st	Z, r25
				State = ON_1;
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	90 93 1d 01 	sts	0x011D, r25
			}
			if(Sensors.ElevatorOnFloor2) {
 520:	81 ff       	sbrs	r24, 1
 522:	08 c0       	rjmp	.+16     	; 0x534 <StateMachineUpdate+0x2e4>
				Actuators.DriveDownwards = 0;
 524:	eb e0       	ldi	r30, 0x0B	; 11
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	80 81       	ld	r24, Z
 52a:	8d 7f       	andi	r24, 0xFD	; 253
 52c:	80 83       	st	Z, r24
				State = ON_2;
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	80 93 1d 01 	sts	0x011D, r24
 534:	08 95       	ret

00000536 <__tablejump2__>:
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31

0000053a <__tablejump__>:
 53a:	05 90       	lpm	r0, Z+
 53c:	f4 91       	lpm	r31, Z
 53e:	e0 2d       	mov	r30, r0
 540:	09 94       	ijmp

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
